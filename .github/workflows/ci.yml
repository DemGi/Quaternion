name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]
  create:

defaults:
  run:
    shell: bash

jobs:
  CI:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04 ]
        compiler: [ GCC, Clang ]
        platform: [ '' ]
        qt-version: [ '5.9.9' ]
        composition: [ static, dynamic ]
        qt-arch: [ '' ]
        exclude:
        - compiler: Clang
          composition: static # Replace with all-in-one (see below)
        include:
        - os: ubuntu-18.04
          compiler: Clang
          qt-version: '5.14.2'
          composition: all-in-one
        - os: macos-10.15
          compiler: Clang
          qt-version: '5.14.2'
          composition: all-in-one
        - os: windows-2019
          compiler: MSVC
          platform: x86
          qt-version: '5.14.2'
          composition: all-in-one
          qt-arch: win32_msvc2017
        - os: windows-2019
          compiler: MSVC
          platform: x64
          qt-version: '5.14.2'
          composition: all-in-one
          qt-arch: win64_msvc2017_64

    env:
      DEPLOY_VERBOSITY: 1
      QTKEYCHAIN_REF: v0.12.0
      QUOTIENT_REF: 0.6.x

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: ${{ matrix.composition == 'all-in-one' }}

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}/Qt
        key: ${{ runner.os }}${{ matrix.platform }}-Qt${{ matrix.qt-version }}-cache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.11.1
      with:
        version: ${{ matrix.qt-version }}
        arch: ${{ matrix.qt-arch }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        mirror: https://ftp.fau.de/qtproject/

    - name: Install Ninja and other deps (Linux)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        if [ "${{ matrix.composition }}" == "all-in-one" ]; then
          EXTRA_DEPS="appstream libgstreamer-plugins-base1.0.0"
        fi
        sudo apt-get -qq install ninja-build appstream-util $EXTRA_DEPS

    - name: Install Ninja (macOS/Windows)
      if: ${{ !startsWith(matrix.os, 'ubuntu') }}
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Setup environment
      run: |
        if [ "${{ matrix.compiler }}" == "GCC" ]; then
            echo "CC=gcc" >>$GITHUB_ENV
            echo "CXX=g++" >>$GITHUB_ENV
        elif [ "${{ matrix.compiler }}" == "Clang" ]; then
            echo "CC=clang" >>$GITHUB_ENV
            echo "CXX=clang++" >>$GITHUB_ENV
        fi
        if [ "${{ runner.os }}" == "macOS" ]; then
            echo "/usr/local/opt/qt/bin" >>$GITHUB_PATH
        fi
        if grep -q 'refs/tags' <<<'${{ github.ref }}'; then
            VERSION="$(git describe --tags)"
        elif grep -q 'refs/heads' <<<'${{ github.ref }}'; then
            VERSION="ci${{ github.run_number }}-$(git describe --all --contains)"
        else
            VERSION="ci${{ github.run_number }}-$(git rev-parse --short HEAD)"
        fi
        echo "VERSION=$VERSION" >>$GITHUB_ENV
        DESTDIRNAME=Quaternion-$VERSION
        echo "DESTDIRNAME=$DESTDIRNAME" >>$GITHUB_ENV
        DESTDIR=${{ runner.temp }}/$DESTDIRNAME
        echo "DESTDIR=$DESTDIR" >>$GITHUB_ENV
        echo "CMAKE_ARGS=-GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_PREFIX_PATH=$DESTDIR/usr \
              -DBUILD_SHARED_LIBS=${{ matrix.composition == 'dynamic' }}" \
            >>$GITHUB_ENV
        if [ "${{ matrix.compiler }}" == "MSVC" ]; then
            # Huge thanks go to @kromain for the cmd.exe command line snippet; see https://github.com/kromain/wsl-utils
            echo 'WRAP=cmd.exe /V /D /C call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.platform }} &&' >>$GITHUB_ENV
        fi
        mkdir package # If there's a package to pack

    - name: Get, build and install QtKeychain
      run: |
        git clone --depth=1 -b $QTKEYCHAIN_REF https://github.com/frankosterfeld/qtkeychain
        cd qtkeychain
        $WRAP cmake -S . -B build $CMAKE_ARGS -DQTKEYCHAIN_STATIC=${{ matrix.composition != 'dynamic' }}
        $WRAP cmake --build build --target install

    - name: Get, build and install libQuotient
      if: matrix.composition != 'all-in-one'
      run: |
        git clone --depth=1 -b $QUOTIENT_REF https://github.com/quotient-im/libQuotient
        cd libQuotient
        $WRAP cmake -S . -B build $CMAKE_ARGS
        $WRAP cmake --build build --target install

    - name: Configure Quaternion
      run: "$WRAP cmake -LA -S $GITHUB_WORKSPACE -B build $CMAKE_ARGS -DDEPLOY_VERBOSITY=$DEPLOY_VERBOSITY"

    - name: Build Quaternion
      run: "$WRAP cmake --build build --target quaternion"

    - name: Install and validate Quaternion (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cmake --build build --target install
        appstream-util validate $DESTDIR/usr/share/metainfo/*.appdata.xml

    - name: Make image (macOS)
      if: startsWith(matrix.os, 'macos') && matrix.composition == 'all-in-one'
      run: |
        cmake --build build --target image
        mv build/quaternion.dmg package/quaternion-$VERSION.dmg

    - name: Make AppImage (Linux)
      if: startsWith(matrix.os, 'ubuntu') && matrix.composition == 'all-in-one'
      env:
        QML_SOURCES_PATHS: ${{ github.workspace }}/client/qml
      run: |
        for f in linuxdeploy linuxdeploy-plugin-qt; do
            wget -c -nv --directory-prefix=linuxdeploy \
                https://github.com/linuxdeploy/$f/releases/download/continuous/$f-x86_64.AppImage
            chmod +x linuxdeploy/$f-x86_64.AppImage
        done
        LD_LIBRARY_PATH=$Qt5_DIR/lib QMAKE=$Qt5_DIR/bin/qmake \
            OUTPUT=package/quaternion-$VERSION.AppImage \
            linuxdeploy/linuxdeploy-x86_64.AppImage --appdir $DESTDIR --plugin qt --output appimage
            
    - name: Archive the install tree (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        cd $DESTDIR
        rm -rf bearer qmltooling
        cd ..
        7z a quaternion-$VERSION-${{ matrix.artefact }} $DESTDIRNAME
            
    - name: Upload artefacts to Bintray
      if: matrix.composition == 'all-in-one' && !startsWith(github.ref, 'refs/tags') # Tags will go to GitHub Releases
      uses: reznikmm/upload-bintray-action@v4
      with:
        username: kitsune
        subject: quotient
        repository: ci
        package: Quaternion
        version: ci${{ github.run_number }}
        sourcePath: 'package/quaternion-*'
        override: 1
        apiKey: ${{ secrets.BINTRAY_API_KEY }}
